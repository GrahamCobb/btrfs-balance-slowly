#!/usr/bin/python3
#
# Copyright (C) 2019 Graham R. Cobb
# Copyright (C) 2017 Hans van Kranenburg <hans@knorrie.org>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Note: this software is based on btrfs-balance-least-used, by
# Hans van Kranenburg <hans@knorrie.org>. Used with permission.

# Note: the master version of this file is in git but it has to be checked
# and then stored somewhere like /usr/local/sbin/ to be safe to be run automatically by root.
# Never have root automatically run programs/scripts that can be modified by non-root users.

# btrfs-balance-slowly.python [options] <filter> <disk>
#
# Do a btrfs balance with frequent breaks.
#
# This script is designed to run a btrfs balance in small portions, using limits and filters.
# There can be delays between portions, and there are hooks to allow services
# to be stopped during the balance portion and restarted again afterwards.
#


import argparse
import btrfs
import errno
import heapq
import sys
import time


class Bork(Exception):
    pass

PRE = 1
POST = 2

def load_block_groups(fs, max_used_pct, bgflag):
    min_used_pct = 101
    block_groups = []
    print("Loading block group objects with used_pct <= {} ...".format(max_used_pct),
          end='', flush=True)
    for chunk in fs.chunks():
        if not (chunk.type & bgflag):
            continue
        try:
            block_group = fs.block_group(chunk.vaddr, chunk.length)
            if block_group.used_pct <= max_used_pct:
                block_groups.append((block_group.used_pct, block_group))
            if block_group.used_pct < min_used_pct:
                min_used_pct = block_group.used_pct
        except IndexError:
            continue
    heapq.heapify(block_groups)
    print(" found {}".format(len(block_groups)))
    return min_used_pct, block_groups

def balance_one_block_group(fs, block_groups, max_used_pct):
    next_used_pct, next_block_group = block_groups[0]
    try:
        block_group = fs.block_group(next_block_group.vaddr, next_block_group.length)
    except IndexError:
        heapq.heappop(block_groups)
        return
    vaddr = block_group.vaddr
    used_pct = block_group.used_pct
    flags = block_group.flags
    if used_pct > next_used_pct:
        if used_pct > max_used_pct:
            print("Ignoring block group vaddr {} used_pct changed {} -> {}".format(
                vaddr, next_used_pct, used_pct))
            heapq.heappop(block_groups)
        else:
            print("Postponing block group vaddr {} used_pct changed {} -> {}".format(
                vaddr, next_used_pct, used_pct))
            heapq.heapreplace(block_groups, (used_pct, block_group))
        return

    start_time = time.time()
    heapq.heappop(block_groups)
    args = btrfs.ioctl.BalanceArgs(vstart=vaddr, vend=vaddr+1)
    print("Balance block group vaddr {} used_pct {} ...".format(
        vaddr, used_pct), end='', flush=True)
    try:
        if flags & btrfs.BLOCK_GROUP_DATA:
            progress = btrfs.ioctl.balance_v2(fs.fd, data_args=args)
        elif flags & btrfs.BLOCK_GROUP_METADATA:
            progress = btrfs.ioctl.balance_v2(fs.fd, meta_args=args)
        elif flags & btrfs.BLOCK_GROUP_SYSTEM:
            progress = btrfs.ioctl.balance_v2(fs.fd, sys_args=args)
        else:
            Bork("Internal error: unrecognised block group type")
        end_time = time.time()
        print(" duration {} sec total {}".format(int(end_time - start_time), progress.considered))
    except KeyboardInterrupt:
        end_time = time.time()
        print(" duration {} sec".format(int(end_time - start_time)))
        raise


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-d',
        '--data',
        action='store_true',
        help="Balance data block groups (default)",
    )
    parser.add_argument(
        '-m',
        '--meta',
        action='store_true',
        help="Balance metadata block groups",
    )
    parser.add_argument(
        '-s',
        '--system',
        action='store_true',
        help="Balance system block groups",
    )
    parser.add_argument(
        '-u',
        '--usage',
        type=int,
        default=100,
        help="Only consider block groups with less than this percentage used",
    )
    parser.add_argument(
        '-l',
        '--limit',
        type=int,
        default=0,
        help="Maximum number of portions",
    )
    parser.add_argument(
        '-t',
        '--time',
        type=int,
        default=3600,
        help="Maximum total time (in seconds)",
    )
    parser.add_argument(
        '-L',
        '--portion-limit',
        type=int,
        default=0,
        help="Maximum number of block groups for each balance portion",
    )
    parser.add_argument(
        '-T',
        '--portion-time',
        type=int,
        default=300,
        help="Timeout for each balance portion (in seconds)",
    )
    parser.add_argument(
        '-i',
        '--interval',
        type=int,
        default=600,
        help="Delay between portions (in seconds)",
    )
    parser.add_argument(
        '-H',
        '--hook',
        default='hook_null',
        help="Command to execute before/after each portion of balance",
    )
    parser.add_argument(
        'mountpoint',
        help="Btrfs filesystem mountpoint",
    )
    return parser.parse_args()


def permission_check(fs):
    """This is a simple canary function that explodes if the user does not have
    enough permissions to use the search ioctl.
    """
    fs.top_level()

def pre_balance_hook(hook, disk):
    exec(hook + "(PRE,disk)")

def post_balance_hook(hook,disk):
    exec(hook + "(POST,disk)")

# Hook which does nothing (default)
def hook_null(context, disk):
    if context == PRE :
        pass
    elif context == POST :
        pass
    else :
        raise Bork("hook_null internal error: invalid hook argument {}".format(context))

# Hook used for testing
def hook_test(context, disk):
    if context == PRE :
        raise Bork("context = {} disk = {}".format(context, disk))
    elif context == POST :
        raise Bork("context = {} disk = {}".format(context, disk))
    else :
        raise Bork("hook_test internal error: invalid hook argument {}".format(context))

# Hook which stops mail handling during balance
# Used for main data disk on server
def hook_nomail(context, disk):
    import subprocess
    import syslog
    if context == PRE :
        try :
            print("Stopping fetchmail, postfix and dovecot")
            subprocess.run(["systemctl","stop","fetchmail"], check=True)
            subprocess.run(["systemctl","stop","postfix"], check=True)
            subprocess.run(["systemctl","stop","dovecot"], check=True)
        except :
            # Stopping services failed. Try to start them again
            syslog.syslog(syslog.LOG_ERR,"Stopping fetchmail, postfix or dovecot failed.  Trying restarting.")
            print("Stopping fetchmail, postfix or dovecot failed.  Trying restarting.", file=sys.stderr, flush=True)
            subprocess.run(["systemctl","start","dovecot"])
            subprocess.run(["systemctl","start","postfix"])
            subprocess.run(["systemctl","start","fetchmail"])
            raise
    elif context == POST :
        print("Starting fetchmail, postfix and dovecot")
        
        status_dovecot = subprocess.run(["systemctl","start","dovecot"]).returncode
        if status_dovecot != 0 :
            syslog.syslog(syslog.LOG_ERR,"Could not restart dovecot: {}".format(status_dovecot))
            print("Could not restart dovecot: {}".format(status_dovecot), file=sys.stderr, flush=True)
            # Dovecot has failed, we used to just go on and try to restart postfix and fetchmail anyway
            # but now that postifx depends on dovecot-lmtp we don't
            raise Bork("Could not restart dovecot: {}".format(status_dovecot))
       
        status_postfix = subprocess.run(["systemctl","start","postfix"]).returncode
        if status_postfix != 0 :
            syslog.syslog(syslog.LOG_ERR,"Could not restart postfix: {}".format(status_postfix))
            # Postfix has failed.  Do not restart fetchmail, just return
            raise Bork("Could not restart postfix: {}".format(status_postfix))
        
        status_fetchmail = subprocess.run(["systemctl","start","fetchmail"]).returncode
        if status_fetchmail != 0 :
            syslog.syslog(syslog.LOG_ERR,"Could not restart fetchmail: {}".format(status_fetchmail))
            raise Bork("Could not restart fetchmail: {}".format(status_fetchmail))
        
        # Postfix and Fetchmail restarted, check whether dovecot failed
        # Note: no longer used but left in place in case we go back to restarting postfix when dovecot fails
        if status_dovecot != 0 :
            raise Bork("Could not restart dovecot: {}".format(status_dovecot))
    else :
        raise Bork("hook_nomail internal error: invalid hook argument {}".format(context))
    
def main():
    args = parse_args()
    max_used_pct = args.usage
    path = args.mountpoint
    limit = args.limit
    tlimit = args.time
    portion_limit = args.portion_limit
    portion_tlimit = args.portion_time
    interval = args.interval
    hook = args.hook
    bgflag = (btrfs.BLOCK_GROUP_DATA if args.data else 0) | (btrfs.BLOCK_GROUP_METADATA if args.meta else 0) | (btrfs.BLOCK_GROUP_SYSTEM if args.system else 0)
    bgflag = bgflag or btrfs.BLOCK_GROUP_DATA
    
    try:
        with btrfs.FileSystem(path) as fs:
            permission_check(fs)
            min_used_pct, block_groups = load_block_groups(fs, max_used_pct, bgflag)
            if len(block_groups) == 0:
                print("Nothing to do, least used block group has used_pct {}".format(min_used_pct))
                return
            # Start balance
            balance_start_time = time.time()
            # Start first portion
            portion_count = 1
            bg_count = 0
            pre_balance_hook(hook, path)
            portion_start_time = time.time()
            print("Portion {} starting at {}".format(portion_count,time.asctime(time.localtime(portion_start_time))))
            while len(block_groups) > 0 and (time.time() - balance_start_time) < tlimit and (limit == 0 or portion_count <= limit) :
                bg_count = bg_count + 1
                balance_one_block_group(fs, block_groups, max_used_pct)
                if len(block_groups) == 0 or (time.time() - balance_start_time) > tlimit :
                    break
                if (time.time() - portion_start_time) > portion_tlimit or (portion_limit > 0 and bg_count >= portion_limit) :
                    # End of this portion
                    # Was this the final portion?
                    if limit > 0 and portion_count >= limit :
                        break
                    print("Portion {} completed at {}. Suspend processing for {} seconds".format(portion_count,time.asctime(time.localtime()),interval))
                    post_balance_hook(hook, path)
                    time.sleep(interval)
                    portion_count += 1
                    bg_count = 0
                    pre_balance_hook(hook, path)
                    portion_start_time = time.time()
                    print("Portion {} started at {}".format(portion_count,time.asctime(time.localtime(portion_start_time))))
            # End final portion
            print("Final portion {} completed at {}".format(portion_count,time.asctime(time.localtime())))
            post_balance_hook(hook, path)
    except OSError as e:
        if e.errno == errno.EPERM:
            raise Bork("Insufficient permissions to use the btrfs kernel API.\n"
                       "Hint: Try running the script as root user.".format(e))
        elif e.errno == errno.ENOTTY:
            raise Bork("Unable to retrieve data. Hint: Not a mounted btrfs file system?")
        raise


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Exiting...")
        sys.exit(130)  # 128 + SIGINT
    except Bork as e:
        print("Error: {0}".format(e), file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(e)
        sys.exit(1)
